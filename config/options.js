const UtilHelper = require('../models/helpers/UtilHelper');

const options = {
  randomUsernameSize: 10,
  jwtTokenExpiry: '1d',
  defaultOTP: 5555,
  refreshTokenExpiryTime: 300,
  userNamePrefix: 'MG',
  otpExpireInDays: 1,
  userRedirectionPages: {
    MOBILE_VERIFICATION: 'mobile_verification',
    EMAIL_VERIFICATION: 'email_verification',
    CREATE_PASSWORD: 'create_password',
    SELECT_CATEGORY: 'select_category',
    PROFESSIONAL_REGISTRATION: 'professional_registration',
    EDUCATION_REGISTRATION: 'education_registration',
    VIDEO_KYC: 'video_kyc',
    VERIFICATION_PENDING: 'verification_pending',
  },
  defaultStatus: {
    ON_BOARDED: 'on_boarded',
    PENDING: 'pending',
    APPROVED: 'approved',
    ACTIVE: 'active',
    INACTIVE: 'inactive',
    BLOCKED: 'blocked',
    UNBLOCKED: 'unblocked',
    DELETED: 'deleted',
    DISAPPROVED: 'disapproved',
    REJECTED: 'rejected',
    WITHDRAWN: 'withdrawn',
    COMPLETED: 'completed',
  },
  emailSubjects: {
    OTP: 'OTP',
    CREDENTIALS: 'Credentials',
  },
  tokenType: {
    ACCESS_TOKEN: 'access_token',
    REFRESH_TOKEN: 'refresh_token',
  },
  socketPublicGroups: {
    USER_PROFILE: 'user.profile#',
    POST_UPDATE: 'post.id#',
  },
  socketPrivateGroups: {
    USER_PRIVATE: 'user.id#',
    PRIVATE_ROOM: 'private_room.id#',
    PRIVATE_CHAT_LIST: 'private_chat_list.id#',
    GLOBAL_CHANNEL: 'globalChannel',
  },
  resCode: {
    HTTP_OK: 200,
    HTTP_CREATE: 201,
    HTTP_NO_CONTENT: 204,
    HTTP_BAD_REQUEST: 400,
    HTTP_UNAUTHORIZED: 401,
    HTTP_FORBIDDEN: 403,
    HTTP_NOT_FOUND: 404,
    HTTP_METHOD_NOT_ALLOWED: 405,
    HTTP_CONFLICT: 409,
    HTTP_INTERNAL_SERVER_ERROR: 500,
    HTTP_SERVICE_UNAVAILABLE: 503,
  },
  errorTypes: {
    OAUTH_EXCEPTION: 'OAuthException',
    ACCESS_DENIED_EXCEPTION: 'AccessDeniedException',
    ALREADY_AUTHENTICATED: 'AlreadyAuthenticated',
    UNAUTHORIZED_ACCESS: 'UnauthorizedAccess',
    FORBIDDEN: 'Forbidden',
    INPUT_VALIDATION: 'InputValidationException',
    ACCOUNT_ALREADY_EXIST: 'AccountAlreadyExistException',
    ACCOUNT_DOES_NOT_EXIST: 'AccountDoesNotExistException',
    ENTITY_NOT_FOUND: 'EntityNotFound',
    ACCOUNT_BLOCKED: 'AccountBlocked',
    ACCOUNT_DEACTIVATED: 'AccountDeactivated',
    CONTENT_BLOCKED: 'ContentBlocked',
    CONTENT_REMOVED: 'ContentRemoved',
    PRIVATE_CONTENT: 'PrivateContent',
    PRIVATE_ACCOUNT: 'PrivateAccount',
    DUPLICATE_REQUEST: 'DuplicateRequest',
    EMAIL_NOT_VERIFIED: 'emailNotVerified',
    MOBILE_NUMBER_NOT_VERIFIED: 'mobileNumberNotVerified',
    INTERNAL_SERVER_ERROR: 'InternalServerError',
    CATCH_ERRORS: 'Oops! something went wrong.',
  },
  errorMessage: {
    UNAUTHORIZED_ACCESS: 'Not authorized to perform this action',
    SERVER_ERROR: 'Oops! something went wrong.',
    INVALID_CREDENTIALS: 'The email and/or password entered are incorrect',
    OTP_INVALID: 'Invalid Otp',
    CONTACT_ADMIN: 'Contact admin to perform edit',
    COUNTRY_CODE: 'Please add country code',
    INCORRECT_DATA: (data) => `The ${data} entered is incorrect`,
    INVALID_REQUEST: 'Invalid Request',
    USER_ACCOUNT_BLOCKED: 'Your account has been blocked, Please contact admin',
    ROLE_INVALID_LOGIN: 'Account access denied',
    NO_USER: (data) => `User does not exists with this ${data}`,
    EXISTS_USER: (data) => `User exists with ${data}`,
    DOES_NOT_EXIST: (data) => `The ${data} does not exist`,
    ALREADY_EXIST: (data) => `The ${data} already exist`,
    INCORRECT_FILE_DATA: 'File contains invalid data',
    ePortfolioStatus: (status) => `You request is ${status}`,
    ePortfolioPaymentStatus: (status) => `You payment is ${status}`,
    SAME_EMAIL_MOBILE_EXISTS: (data) => `User with same ${data} already exists`,
    DATA_NOT_FOUND: (data) => `${data} not found`,
  },
  successMessage: {
    OTP_SEND: (type) => `An OTP has been send to your ${type}`,
    OTP_VERIFIED: (type) => `OTP has been verified`,
    LOG: (data) => `You have ${data} successfully`,
    UPDATE_SUCCESS_MESSAGE: (data) => `${data} updated successfully`,
    DELETE_SUCCESS_MESSAGE: (data) => `${data} deleted successfully`,
    REMOVED_SUCCESS_MESSAGE: (data) => `${data} removed successfully`,
    ADD_SUCCESS_MESSAGE: (data) => `${data} added successfully`,
    SAVED_SUCCESS_MESSAGE: (data) => `${data} saved successfully`,
    GENERATE_SUCCESS_MESSAGE: (data) => `${data} generate successfully`,
    CHANGED_SUCCESS_MESSAGE: (data) => `${data} changed successfully`,
    VERIFIED_SUCCESS_MESSAGE: (data) => `${data} verified successfully`,
    SEND_SUCCESS_MESSAGE: (data) => `${data} send successfully`,
    MARKED_SUCCESS_MESSAGE: (data) => `${data} marked as primary`,
    REQUEST: (status) => `Your request has been ${status}`,
    FOLLOW_UN_FOLLOW_SUCCESS_MESSAGE: (data) => `${data} successfully`,
  },
  usersRoles: {
    SUPER_ADMIN: 'SUPER_ADMIN',
    ADMIN: 'ADMIN',
    USER: 'USER',
    getAdminArray: () => [
      options.usersRoles.SUPER_ADMIN,
      options.usersRoles.ADMIN,
    ],
    getAllRolesAsArray: () => [
      options.usersRoles.SUPER_ADMIN,
      options.usersRoles.ADMIN,
      options.usersRoles.USER,
    ],
  },
  genOtp: UtilHelper.genOtp,
  genRes: UtilHelper.genRes,
  generateCloudFrontUrl: UtilHelper.generateCloudFrontUrl,
  server: {
    PRODUCTION: 'production',
    DEVELOPMENT: 'development',
  },
};

module.exports = options;
